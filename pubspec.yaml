name: bookbase
description: "A new Flutter project."
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: 'none' # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ^3.8.1

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # The following adds the Cupertino Icons font to your application.
  # Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.8

  # The "json_annotation" package below adds ability to add annotations
  # in your code defined by "json_serializable" package for generating
  # JSON serialization and deserialization methods.
  json_annotation: ^4.9.0

  # The "freezed_annotation" package below adds ability to provide annotations
  # in your code defined by "freezed" package for generating
  # JSON serialization and deserialization methods. This package does nothing
  # without "freezed" package.
  freezed_annotation: ^2.4.1

  # The "fpdart" package below adds functional programming ability to dart.
  fpdart: ^1.1.1

  # The "get_it" package below is a simple Dependency Injection tool for Dart
  # and Flutter projects.
  get_it: ^8.0.3

  # The "dio" package below is a HTTP Networking Library for performing API Calls.
  dio: ^5.9.0

  # The "flutter_bloc" package below is a State Management package for our project.
  flutter_bloc: ^9.1.1

  # The "cached_network_image" package below is used to show images from the 
  # internet and keep them in the cache directory.
  cached_network_image: ^3.4.1

  # The "google_fonts" package below is a helper package to get fonts
  # from fonts.google.com
  google_fonts: ^6.3.2

  # The "shimmer" package below providers an easy way to add shimmer effect.
  shimmer: ^3.0.0

dev_dependencies:
  flutter_test:
    sdk: flutter

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^5.0.0

  # The "build_runner" package below will provide code generation for defined
  # dart and Flutter packages.
  build_runner: ^2.4.6

  # The "json_serializable" package below will provide dart builders for 
  # handling JSON. It will generate toJson/fromJson code for a class annotated
  # with "json_annotations" package (defined in dependencies).
  json_serializable: ^6.7.1

  # The "freezed" package below will generate code for data classed, tagged
  # unions, nested classes and cloning.
  freezed: ^2.4.6

  # The "mocktail" package below is used to mock dependencies required during
  # unit testing.
  mocktail: ^1.0.4

  # The "flutter_launcher_icons" package below is a command-line tool which
  # simplifies the task of updating your Flutter app's launcher icons.
  flutter_launcher_icons: ^0.14.4

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

flutter_launcher_icons:
  android: "launcher_icon"
  ios: true
  image_path: "assets/icon/icon.png"
  min_sdk_android: 21

# The following section is specific to Flutter packages.
flutter:

  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  # To add assets to your application, add an assets section, like this:
  # assets:
  #   - images/a_dot_burr.jpeg
  #   - images/a_dot_ham.jpeg

  # An image asset can refer to one or more resolution-specific "variants", see
  # https://flutter.dev/to/resolution-aware-images

  # For details regarding adding assets from package dependencies, see
  # https://flutter.dev/to/asset-from-package

  # To add custom fonts to your application, add a fonts section here,
  # in this "flutter" section. Each entry in this list should have a
  # "family" key with the font family name, and a "fonts" key with a
  # list giving the asset and other descriptors for the font. For
  # example:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # For details regarding fonts from package dependencies,
  # see https://flutter.dev/to/font-from-package
